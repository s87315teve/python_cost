"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fixRequestBody = fixRequestBody;
const querystring = require("querystring");
const logger_1 = require("../logger");
/**
 * Fix proxied body if bodyParser is involved.
 */
function fixRequestBody(proxyReq, req, res, options) {
    const requestBody = req.body;
    if (!requestBody) {
        return;
    }
    const contentType = proxyReq.getHeader('Content-Type');
    if (!contentType) {
        return;
    }
    const logger = (0, logger_1.getLogger)(options);
    // Handle bad request when unexpected "Connect: Upgrade" header is provided
    if (/upgrade/gi.test(proxyReq.getHeader('Connection'))) {
        handleBadRequest({ proxyReq, req, res });
        logger.error(`[HPM] HPM_UNEXPECTED_CONNECTION_UPGRADE_HEADER. Aborted request: ${req.url}`);
        return;
    }
    // Handle bad request when invalid request body is provided
    if (hasInvalidKeys(requestBody)) {
        handleBadRequest({ proxyReq, req, res });
        logger.error(`[HPM] HPM_INVALID_REQUEST_DATA. Aborted request: ${req.url}`);
        return;
    }
    const writeBody = (bodyData) => {
        proxyReq.setHeader('Content-Length', Buffer.byteLength(bodyData));
        proxyReq.write(bodyData);
    };
    // Use if-elseif to prevent multiple writeBody/setHeader calls:
    // Error: "Cannot set headers after they are sent to the client"
    if (contentType.includes('application/json') || contentType.includes('+json')) {
        writeBody(JSON.stringify(requestBody));
    }
    else if (contentType.includes('application/x-www-form-urlencoded')) {
        writeBody(querystring.stringify(requestBody));
    }
    else if (contentType.includes('multipart/form-data')) {
        writeBody(handlerFormDataBodyData(contentType, requestBody));
    }
}
/**
 * format FormData data
 * @param contentType
 * @param data
 * @returns
 */
function handlerFormDataBodyData(contentType, data) {
    const boundary = contentType.replace(/^.*boundary=(.*)$/, '$1');
    let str = '';
    for (const [key, value] of Object.entries(data)) {
        str += `--${boundary}\r\nContent-Disposition: form-data; name="${key}"\r\n\r\n${value}\r\n`;
    }
    return str;
}
function hasInvalidKeys(obj) {
    return Object.keys(obj).some((key) => /[\n\r]/.test(key));
}
function handleBadRequest({ proxyReq, req, res }) {
    res.writeHead(400);
    res.end('Bad Request');
    proxyReq.destroy();
    req.destroy();
}
